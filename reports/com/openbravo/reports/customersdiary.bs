report = new com.openbravo.pos.reports.PanelReportBean();

report.setTitleKey("Menu.CustomersDiary");
report.setReport("/com/openbravo/reports/customersdiary");
report.setResourceBundle("com/openbravo/reports/customersdiary_messages");

report.setSentence("SELECT RECEIPTS.DATENEW, TICKETS.TICKETID, PAYMENTS.PAYMENT, PAYMENTS.TOTAL, CUSTOMERS.TAXID, CUSTOMERS.NAME " + //, PRODUCTS.NAME " +
                 "FROM RECEIPTS, TICKETS, CUSTOMERS, PAYMENTS " + //, PRODUCTS, TICKETLINES " +
                 "WHERE RECEIPTS.ID = TICKETS.ID AND RECEIPTS.ID = PAYMENTS.RECEIPT " + //AND TICKETLINES.TICKET = TICKETS.ID AND TICKETLINES.PRODUCT = PRODUCTS.ID " +
                 //"AND TICKETS.CUSTOMER = CUSTOMERS.ID AND (PAYMENTS.PAYMENT = 'debt' OR PAYMENTS.PAYMENT = 'debtpaid') AND ?(QBF_FILTER) " +
                 "AND TICKETS.CUSTOMER = CUSTOMERS.ID AND (PAYMENTS.PAYMENT = 'debt' OR PAYMENTS.PAYMENT = 'debtpaid' OR PAYMENTS.PAYMENT = 'cashrefund' OR PAYMENTS.PAYMENT = 'chequerefund' OR PAYMENTS.PAYMENT = 'paperout' OR PAYMENTS.PAYMENT = 'magcardrefund') AND ?(QBF_FILTER) " +
                 "ORDER BY CUSTOMERS.NAME ASC, RECEIPTS.DATENEW ASC");
report.addParameter("CUSTOMERS.ID");
report.addParameter("CUSTOMERS.NAME");
report.addQBFFilter(new com.openbravo.pos.reports.JParamsCustomer());

report.addParameter("RECEIPTS.DATENEW");
report.addParameter("RECEIPTS.DATENEW");
report.addQBFFilter(new com.openbravo.pos.reports.JParamsDatesInterval());

report.addField("DATENEW", com.openbravo.data.loader.Datas.TIMESTAMP);
report.addField("TICKETID", com.openbravo.data.loader.Datas.STRING);
report.addField("PAYMENT", com.openbravo.data.loader.Datas.STRING);
report.addField("TOTAL", com.openbravo.data.loader.Datas.DOUBLE);
report.addField("TAXID", com.openbravo.data.loader.Datas.STRING);
report.addField("NAME", com.openbravo.data.loader.Datas.STRING);
//report.addField("PRODUCT", com.openbravo.data.loader.Datas.STRING);

report;